generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  pseudo       String?
  password     String
  role         Role     @default(GUEST) // Rôle administratif (ADMIN/GUEST)
  allianceRole String? // Rôle d'alliance depuis le référentiel (optionnel)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Member {
  id               String           @id @default(cuid())
  pseudo           String           @unique
  level            Int              @default(1)
  power            BigInt           @default(0)
  kills            Int              @default(0)
  specialty        String?
  allianceRole     String           @default("MEMBER") // clé du référentiel ALLIANCE_ROLE
  status           Status           @default(ACTIVE)
  tags             String[]
  notes            String?
  lastActive       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  trainInstances   TrainInstance[]  @relation("TrainConductor")
  trainSlots       TrainSlot[]      @relation("TrainSlotConductor")
  trainPassengers  TrainPassenger[] @relation("TrainPassengers")
  vsParticipations VSParticipant[]
  HivePlacement    HivePlacement?   @relation(fields: [hivePlacementId], references: [id])
  hivePlacementId  String?
}

model TrainInstance {
  id                String           @id @default(cuid())
  date              DateTime // Date réelle du train (ex: 2025-06-28)
  dayOfWeek         String // lundi, mardi, etc. (pour affichage)
  departureTime     String // Heure choisie par le conducteur (ex: "20:00")
  realDepartureTime String // Heure réelle de départ (departureTime + 4h)
  conductorId       String?
  conductor         Member?          @relation("TrainConductor", fields: [conductorId], references: [id], onDelete: SetNull)
  passengers        TrainPassenger[]
  status            TrainStatus      @default(SCHEDULED)
  isArchived        Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  history           TrainHistory[]

  @@unique([date]) // Un seul train par date
  @@index([date])
  @@index([status])
  @@index([isArchived])
}

model TrainSlot {
  id            String           @id @default(cuid())
  day           String           @unique
  departureTime String
  conductorId   String?
  conductor     Member?          @relation("TrainSlotConductor", fields: [conductorId], references: [id], onDelete: SetNull)
  passengers    TrainPassenger[]
  history       TrainHistory[]
  isObsolete    Boolean          @default(true) // Marquer comme obsolète
}

model TrainPassenger {
  id              String         @id @default(cuid())
  // Nouveau système
  trainInstanceId String?
  trainInstance   TrainInstance? @relation(fields: [trainInstanceId], references: [id], onDelete: Cascade)
  // Ancien système (compatibilité)
  trainSlotId     String?
  trainSlot       TrainSlot?     @relation(fields: [trainSlotId], references: [id], onDelete: Cascade)
  // Commun
  passengerId     String
  passenger       Member         @relation("TrainPassengers", fields: [passengerId], references: [id])
  joinedAt        DateTime       @default(now())

  @@unique([trainInstanceId, passengerId])
  @@unique([trainSlotId, passengerId])
}

model TrainHistory {
  id              String         @id @default(cuid())
  // Nouveau système
  trainInstanceId String?
  trainInstance   TrainInstance? @relation(fields: [trainInstanceId], references: [id], onDelete: Cascade)
  // Ancien système (compatibilité)
  trainSlotId     String?
  trainSlot       TrainSlot?     @relation(fields: [trainSlotId], references: [id], onDelete: Cascade)
  // Commun
  action          TrainAction
  actorId         String?
  actorPseudo     String?
  targetId        String?
  targetPseudo    String?
  details         String?
  timestamp       DateTime       @default(now())

  @@index([trainInstanceId])
  @@index([trainSlotId])
  @@index([timestamp])
}

model Event {
  id                  String    @id @default(cuid())
  title               String
  description         String?
  detailedDescription String? // Description détaillée avec formatage
  type                EventType
  tags                String[] // Tags pour catégoriser les événements
  startDate           DateTime
  endDate             DateTime?
  isRecurring         Boolean   @default(false) // Événement répétitif
  recurringDays       String[]  @default([]) // Jours de la semaine (monday, tuesday, etc.)
  recurringEndDate    DateTime? // Date de fin de la récurrence
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model AllianceStats {
  id            String   @id @default(cuid())
  totalMembers  Int      @default(0)
  totalPower    BigInt   @default(0)
  activeMembers Int      @default(0)
  date          DateTime @default(now())
  createdAt     DateTime @default(now())
}

model RolePermission {
  id         String   @id @default(cuid())
  roleType   String // "ADMIN", "MEMBER", ou clé du rôle d'alliance
  permission String // La permission en tant que string
  isEnabled  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([roleType, permission])
  @@index([roleType])
}

model ReferenceData {
  id          String            @id @default(cuid())
  category    ReferenceCategory // Type de référentiel
  key         String // Clé unique dans la catégorie
  label       String // Libellé affiché
  description String? // Description optionnelle
  color       String? // Couleur pour l'affichage (hex)
  icon        String? // Icône optionnelle
  sortOrder   Int               @default(0) // Ordre d'affichage
  isActive    Boolean           @default(true)
  isSystem    Boolean           @default(false) // Empêche la suppression
  metadata    Json? // Données additionnelles
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([category, key])
  @@index([category, isActive])
  @@index([category, sortOrder])
}

model ExportLog {
  id           String       @id @default(cuid())
  type         String // Type d'export (Membres, Trains, etc.)
  format       String // Format (csv, json)
  filename     String // Nom du fichier généré
  recordCount  Int          @default(0) // Nombre d'enregistrements exportés
  fileSize     BigInt       @default(0) // Taille du fichier en octets
  userId       String // Utilisateur qui a lancé l'export
  userEmail    String // Email de l'utilisateur
  status       ExportStatus @default(COMPLETED) // Statut de l'export
  errorMessage String? // Message d'erreur si échec
  duration     Int          @default(0) // Durée en millisecondes
  createdAt    DateTime     @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

model ImportLog {
  id             String       @id @default(cuid())
  type           String // Type d'import (Membres, Trains, etc.)
  format         String // Format du fichier (csv, json, xlsx)
  originalName   String // Nom original du fichier
  fileSize       BigInt       @default(0) // Taille du fichier en octets
  recordCount    Int          @default(0) // Nombre d'enregistrements dans le fichier
  processedCount Int          @default(0) // Nombre d'enregistrements traités
  successCount   Int          @default(0) // Nombre d'enregistrements importés avec succès
  errorCount     Int          @default(0) // Nombre d'enregistrements en erreur
  skippedCount   Int          @default(0) // Nombre d'enregistrements ignorés
  userId         String // Utilisateur qui a lancé l'import
  userEmail      String // Email de l'utilisateur
  status         ImportStatus @default(PENDING) // Statut de l'import
  errorMessage   String? // Message d'erreur global si échec
  errorDetails   Json? // Détails des erreurs par ligne/enregistrement
  duration       Int          @default(0) // Durée en millisecondes
  createdAt      DateTime     @default(now())
  completedAt    DateTime? // Date de fin de traitement

  @@index([userId])
  @@index([createdAt])
  @@index([type])
  @@index([status])
}

model InviteLink {
  id        String    @id @default(cuid())
  token     String    @unique
  createdBy String
  maxUses   Int? // null = unlimited
  usedCount Int       @default(0)
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  usedBy    String[] // emails des utilisateurs qui ont utilisé le lien
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  ADMIN // Administrateur du système
  GUEST // Utilisateur invité/non authentifié
}

enum AllianceRole {
  R5
  R4
  MEMBER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum EventType {
  ALLIANCE_WAR
  BOSS_FIGHT
  SERVER_WAR
  SEASONAL
  GUERRE_ALLIANCE
  EVENT_SPECIAL
  MAINTENANCE
  FORMATION
  REUNION
  AUTRE
}

enum TrainAction {
  CONDUCTOR_ASSIGNED
  CONDUCTOR_REMOVED
  PASSENGER_JOINED
  PASSENGER_LEFT
  TIME_CHANGED
  TRAIN_CREATED
  TRAIN_DELETED
  TRAIN_VALIDATED
  TRAIN_UNVALIDATED
}

enum ReferenceCategory {
  MEMBER_SPECIALTY // Spécialités des membres
  MEMBER_TAG // Tags des membres
  ALLIANCE_ROLE // Rôles d'alliance
  EVENT_TYPE // Types d'événements
  EVENT_TAG // Tags des événements
  PRIORITY_LEVEL // Niveaux de priorité
  STATUS_TYPE // Types de statuts
  HELP_CATEGORY // Catégories d'articles d'aide
  HELP_STATUS // Statuts d'articles d'aide
  HELP_TAG // Tags d'articles d'aide
}

enum ExportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ImportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// === SYSTÈME D'ALERTES ===

model AlertRule {
  id            String         @id @default(cuid())
  name          String // Nom de la règle
  description   String? // Description de la règle
  type          AlertType // Type d'alerte
  isActive      Boolean        @default(true)
  conditions    Json // Conditions sous forme JSON
  severity      AlertSeverity  @default(MEDIUM)
  channels      AlertChannel[] // Canaux de notification
  cooldown      Int            @default(3600) // Cooldown en secondes (1h par défaut)
  lastTriggered DateTime? // Dernière fois que l'alerte s'est déclenchée
  createdBy     String // ID de l'utilisateur créateur
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  alerts        Alert[] // Historique des alertes générées

  @@index([type, isActive])
  @@index([lastTriggered])
}

model Alert {
  id         String        @id @default(cuid())
  ruleId     String // Règle qui a généré cette alerte
  rule       AlertRule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  title      String // Titre de l'alerte
  message    String // Message détaillé
  severity   AlertSeverity
  data       Json? // Données contextuelles
  isRead     Boolean       @default(false)
  isResolved Boolean       @default(false)
  resolvedBy String? // Qui a résolu l'alerte
  resolvedAt DateTime? // Quand l'alerte a été résolue
  createdAt  DateTime      @default(now())

  notifications AlertNotification[] // Notifications envoyées

  @@index([ruleId])
  @@index([createdAt])
  @@index([isRead, isResolved])
}

model AlertNotification {
  id        String              @id @default(cuid())
  alertId   String
  alert     Alert               @relation(fields: [alertId], references: [id], onDelete: Cascade)
  channel   NotificationChannel
  status    NotificationStatus  @default(PENDING)
  sentAt    DateTime?
  error     String? // Message d'erreur si échec
  metadata  Json? // Métadonnées spécifiques au canal
  createdAt DateTime            @default(now())

  @@index([alertId])
  @@index([status])
}

model NotificationConfig {
  id             String              @id @default(cuid())
  channel        NotificationChannel @unique
  isEnabled      Boolean             @default(false)
  config         Json // Configuration spécifique au canal
  testMessage    String? // Message de test
  lastTest       DateTime? // Dernier test effectué
  lastTestStatus Boolean? // Résultat du dernier test
  lastTestError  String? // Erreur du dernier test
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([channel, isEnabled])
}

enum AlertType {
  TRAIN_COVERAGE // Couverture des trains insuffisante
  INACTIVE_MEMBERS // Membres inactifs
  MISSING_CONDUCTOR // Conducteur manquant
  EVENT_REMINDER // Rappel d'événement
  MEMBER_THRESHOLD // Seuil de membres atteint
  POWER_THRESHOLD // Seuil de puissance
  SYSTEM_ERROR // Erreur système
  CUSTOM // Alerte personnalisée
  TRAIN_DEPARTURE // Alerte départ de train
  MANUAL_MESSAGE // Message manuel
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertChannel {
  EMAIL
  DISCORD
  TELEGRAM
  IN_APP
}

enum NotificationChannel {
  DISCORD
  TELEGRAM
  EMAIL
  WEBHOOK
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENDING
  SENT
  FAILED
  RETRY
}

model HelpArticle {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique // URL slug pour SEO
  content     String // Contenu markdown
  excerpt     String? // Résumé/extrait
  category    HelpCategory
  tags        String[]      @default([])
  status      ArticleStatus @default(DRAFT)
  priority    Int           @default(0) // 0 = normal, 1 = important, 2 = critique
  isPublished Boolean       @default(false)
  isFeatured  Boolean       @default(false) // Article mis en avant
  views       Int           @default(0) // Nombre de vues
  authorId    String
  authorEmail String
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([category, isPublished])
  @@index([status])
  @@index([publishedAt])
  @@index([priority])
  @@index([isFeatured])
}

enum HelpCategory {
  GAME_BASICS // Bases du jeu
  STRATEGY // Stratégies
  ALLIANCE // Alliance
  TRAINS // Trains
  EVENTS // Événements
  TIPS_TRICKS // Astuces
  FAQ // Questions fréquentes
  TUTORIAL // Tutoriels
  ADVANCED // Avancé
}

enum ArticleStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum TrainStatus {
  SCHEDULED // Programmé
  BOARDING // Embarquement en cours (dans les 4h)
  DEPARTED // Parti
  CANCELLED // Annulé
  COMPLETED // Terminé
}

// VS (Versus/Guerres) History Models
model VSWeek {
  id              String             @id @default(cuid())
  weekNumber      Int // Numéro de la semaine dans l'année (1-53)
  year            Int // Année
  startDate       DateTime // Début de la semaine VS
  endDate         DateTime // Fin de la semaine VS
  title           String? // Titre/description de la semaine (optionnel)
  allianceScore   Int                @default(0) // Score total de l'alliance
  enemyScore      Int                @default(0) // Score total de l'ennemi
  enemyName       String? // Nom de l'alliance ennemie
  status          VSWeekStatus       @default(ACTIVE)
  isCompleted     Boolean            @default(false)
  result          VSResult? // Résultat final (VICTORY/DEFEAT/DRAW)
  metadata        Json? // Données additionnelles (serveur, etc.)
  days            VSDay[]
  participants    VSParticipant[]
  participantDays VSParticipantDay[] // Résultats quotidiens des participants
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([year, weekNumber])
  @@index([year, weekNumber])
  @@index([status])
  @@index([isCompleted])
}

model VSDay {
  id            String    @id @default(cuid())
  weekId        String
  week          VSWeek    @relation(fields: [weekId], references: [id], onDelete: Cascade)
  dayNumber     Int // Jour de la semaine (1-7)
  date          DateTime // Date du jour
  allianceScore Int       @default(0) // Score alliance du jour
  enemyScore    Int       @default(0) // Score ennemi du jour
  result        VSResult? // Résultat du jour
  events        String[]  @default([]) // Événements du jour (captures, défenses, etc.)
  metadata      Json? // Données additionnelles
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([weekId, dayNumber])
  @@index([weekId, dayNumber])
  @@index([date])
}

model VSParticipant {
  id            String             @id @default(cuid())
  weekId        String
  week          VSWeek             @relation(fields: [weekId], references: [id], onDelete: Cascade)
  memberId      String
  member        Member?            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  totalMvp      Int                @default(0)
  totalKills    Int                @default(0)
  kills         Int                @default(0) // Kills de la semaine
  deaths        Int                @default(0) // Morts de la semaine
  powerGain     BigInt             @default(0) // Gain de puissance
  powerLoss     BigInt             @default(0) // Perte de puissance
  participation Int                @default(0) // Score de participation (0-100)
  rank          Int? // Classement dans l'alliance pour cette semaine
  rewards       String[]           @default([]) // Récompenses obtenues
  metadata      Json? // Données additionnelles
  dailyResults  VSParticipantDay[] // Résultats quotidiens
  points        Int                @default(0) // Points VS pour le classement
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@unique([weekId, memberId])
  @@index([weekId])
  @@index([memberId])
  @@index([kills])
  @@index([participation])
}

model VSParticipantDay {
  id            String        @id @default(cuid())
  participantId String
  participant   VSParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  weekId        String
  week          VSWeek        @relation(fields: [weekId], references: [id], onDelete: Cascade)
  dayNumber     Int // Jour de la semaine (1-6)
  date          DateTime // Date du jour
  kills         Int           @default(0) // Kills du jour
  deaths        Int           @default(0) // Morts du jour
  powerGain     BigInt        @default(0) // Gain de puissance du jour
  powerLoss     BigInt        @default(0) // Perte de puissance du jour
  attacks       Int           @default(0) // Nombre d'attaques
  defenses      Int           @default(0) // Nombre de défenses
  participated  Boolean       @default(false) // A participé ce jour
  mvpPoints     Int           @default(0) // Points MVP du jour
  events        String[]      @default([]) // Événements spéciaux du jour
  notes         String? // Notes sur la performance
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([participantId, dayNumber])
  @@index([weekId, dayNumber])
  @@index([date])
  @@index([kills])
  @@index([participated])
}

enum VSWeekStatus {
  PREPARATION // Préparation
  ACTIVE // En cours
  COMPLETED // Terminée
  CANCELLED // Annulée
}

enum VSResult {
  VICTORY // Victoire
  DEFEAT // Défaite
  DRAW // Égalité
}

model HivePlacement {
  id        String   @id @default(cuid())
  memberId  String?
  x         Int
  y         Int
  createdAt DateTime @default(now())
  Member    Member[]

  // relation removed to simplify marshal storage
  @@unique([memberId])
}
